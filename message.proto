syntax = "proto3";

service Communicator {
  // Request to start a conversation
  rpc InitiateConversation (InitiateRequest) returns (InitiateReply);
  // Request to end a conversation
  rpc TerminateConversation (TerminateRequest) returns (TerminateReply);
  // Bi-directional stream opened for message transaction.
  // Thinking will just have this open for each conversation
  rpc SendMessage (stream MessageRequest) returns (stream MessageReply);
}

message InitiateRequest {
  // Address of the requesting client
  Address clientAddress = 1;
  // Room client wishes to start conversation with
  Room room = 2;
}

message InitiateReply {
  // Success of initialization of conversation
  bool success = 1;
}

message TerminateRequest {
  // Address of the requesting client
  Address clientAddress = 1;
  // Room to leave
  Room room = 2;
}

message TerminateReply {
  // Success of termination
  bool success = 1;
}

message MessageRequest {
  // Address of the requesting client
  Address clientAddress = 1;
  // Message to add to the conversation
  string message = 2;
  // Room to add message to
  Room room = 3;
}

message MessageReply {
  // Stream of the messages written by others
  Message messages = 2;
}

// NOTE the below are basically type aliasing but will allow for extra data to
// added easily if needed.

// Address of the requestor
message Address {
  // Just perhaps the ip address
  string address = 1;
  // User name to be used in the room
  string userName = 2;
}

// Construct for defining a room for communication
message Room {
  string name = 1;
}

// Message construct to determine who has sent the message and its content
message Message {
  Address user = 1;
  string content = 2;
}
