syntax = "proto3";

service Communicator {
  // Request to start a conversation
  rpc InitiateConversation (InitiateRequest) returns (InitiateReply);
  // Request to end a conversation
  rpc TerminateConversation (TerminateRequest) returns (TerminateReply);
  // Bi-directional stream opened for message transaction.
  // Thinking will just have this open for each conversation
  rpc SendMessage (stream MessageRequest) returns (stream MessageReply);
}

message InitiateRequest {
  // Address of the requesting client
  Address address = 1;
  // User client wishes to start conversation with
  User receipient = 2;
}

message InitiateReply {
  // Success of initialization of conversation
  bool success = 1;
  // Allocated ID for the conversation
  uint32 conversationId = 2;
}

message TerminateRequest {
  // Address of the requesting client
  Address address = 1;
  // Conversation to terminate
  uint32 conversationID = 2;
}

message TerminateReply {
  // Success of termination
  bool success = 1;
}

message MessageRequest {
  // Address of the requesting client
  Address address = 1;
  // Message to add to the conversation
  string message = 2;
  // ID of the conversation wishing to add to
  uint32 conversationId = 3;
}

message MessageReply {
  // Success of the message being added to conversation
  // FIXME Not sure of its worth now that it is to be a stream, when no request
  // was made was is the expected value of this?
  bool success = 1;
  // Stream of the messages written by others
  repeated Message messages = 2;
}

// NOTE the below are basically type aliasing but will allow for extra data to
// added easily if needed.

// Address of the requestor
message Address {
  // Just perhaps the ip address
  string address = 1;
}

// Construct for defining a user of the communicator
message User {
  string name = 1;
}

// Message construct to determine who has sent the message and its content
message Message {
  User user = 1;
  string content = 2;
}
